"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DoubleClick;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function DoubleClick(data) {
  let delayTime = data.delay ? data.delay : 300;
  let firstPress = true;
  let lastTime = new Date().getTime();
  let timer = 0;

  const singlePress = now => {
    firstPress = false;
    timer = setTimeout(() => {
      data.singleTap ? data.singleTap() : null;
      firstPress = true;
    }, delayTime);
    lastTime = now;
  };

  const doublePress = now => {
    if (now - lastTime < delayTime) {
      timer && clearTimeout(timer);
      data.doubleTap ? data.doubleTap() : null;
      firstPress = true;
    }
  };

  const _onPress = () => {
    let now = new Date().getTime();
    firstPress ? singlePress(now) : doublePress(now);
  };

  (0, _react.useEffect)(() => {
    return () => {
      timer && clearTimeout(timer);
    };
  }, [timer]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    onPress: _onPress,
    style: data.style
  }, data.children);
}
//# sourceMappingURL=index.js.map