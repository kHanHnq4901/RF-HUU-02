{"version":3,"sources":["index.tsx"],"names":["DoubleClick","data","delayTime","delay","firstPress","lastTime","Date","getTime","timer","singlePress","now","setTimeout","singleTap","doublePress","clearTimeout","doubleTap","_onPress","style","children"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAQe,SAASA,WAAT,CAAqBC,IAArB,EAAiC;AAC9C,MAAIC,SAAS,GAAGD,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACE,KAAlB,GAA0B,GAA1C;AACA,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,QAAgB,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAvB;AACA,MAAIC,KAAa,GAAG,CAApB;;AACA,QAAMC,WAAW,GAAIC,GAAD,IAAiB;AACnCN,IAAAA,UAAU,GAAG,KAAb;AACAI,IAAAA,KAAK,GAAGG,UAAU,CAAC,MAAM;AACvBV,MAAAA,IAAI,CAACW,SAAL,GAAiBX,IAAI,CAACW,SAAL,EAAjB,GAAoC,IAApC;AACAR,MAAAA,UAAU,GAAG,IAAb;AACD,KAHiB,EAGfF,SAHe,CAAlB;AAIAG,IAAAA,QAAQ,GAAGK,GAAX;AACD,GAPD;;AAQA,QAAMG,WAAW,GAAIH,GAAD,IAAiB;AAEnC,QAAIA,GAAG,GAAGL,QAAN,GAAiBH,SAArB,EAAgC;AAC9BM,MAAAA,KAAK,IAAIM,YAAY,CAACN,KAAD,CAArB;AACAP,MAAAA,IAAI,CAACc,SAAL,GAAiBd,IAAI,CAACc,SAAL,EAAjB,GAAoC,IAApC;AACAX,MAAAA,UAAU,GAAG,IAAb;AACD;AACF,GAPD;;AAQA,QAAMY,QAAQ,GAAG,MAAM;AACrB,QAAIN,GAAW,GAAG,IAAIJ,IAAJ,GAAWC,OAAX,EAAlB;AACAH,IAAAA,UAAU,GAAGK,WAAW,CAACC,GAAD,CAAd,GAAsBG,WAAW,CAACH,GAAD,CAA3C;AACD,GAHD;;AAIA,wBAAU,MAAM;AACd,WAAO,MAAM;AACXF,MAAAA,KAAK,IAAIM,YAAY,CAACN,KAAD,CAArB;AACD,KAFD;AAGD,GAJD,EAIG,CAACA,KAAD,CAJH;AAKA,sBACE,6BAAC,6BAAD;AAAkB,IAAA,OAAO,EAAEQ,QAA3B;AAAqC,IAAA,KAAK,EAAEf,IAAI,CAACgB;AAAjD,KACGhB,IAAI,CAACiB,QADR,CADF;AAKD","sourcesContent":["import React, { useEffect } from 'react';\nimport { StyleProp, TouchableOpacity, ViewStyle } from 'react-native';\nexport interface data {\n  singleTap: Function;\n  doubleTap: Function;\n  children: JSX.Element;\n  delay: Number;\n  style: StyleProp<ViewStyle>;\n}\nexport default function DoubleClick(data: data) {\n  let delayTime = data.delay ? data.delay : 300;\n  let firstPress = true;\n  let lastTime: number = new Date().getTime();\n  let timer: number = 0;\n  const singlePress = (now: number) => {\n    firstPress = false;\n    timer = setTimeout(() => {\n      data.singleTap ? data.singleTap() : null;\n      firstPress = true;\n    }, delayTime);\n    lastTime = now;\n  };\n  const doublePress = (now: number) => {\n\n    if (now - lastTime < delayTime) {\n      timer && clearTimeout(timer);\n      data.doubleTap ? data.doubleTap() : null;\n      firstPress = true;\n    }\n  };\n  const _onPress = () => {\n    let now: number = new Date().getTime();\n    firstPress ? singlePress(now) : doublePress(now);\n  };\n  useEffect(() => {\n    return () => {\n      timer && clearTimeout(timer);\n    };\n  }, [timer]);\n  return (\n    <TouchableOpacity onPress={_onPress} style={data.style}>\n      {data.children}\n    </TouchableOpacity>\n  );\n}\n"]}